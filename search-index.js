var searchIndex = {};
searchIndex["mux"] = {"doc":"Data structures representing the mux protocol.","items":[[3,"Dentry","mux","Single entry of the `Dtab`",null,null],[12,"key","","",0,null],[12,"val","","",0,null],[3,"Dtab","","Delegate table.",null,null],[12,"entries","","",1,null],[3,"Tag","","Id number and end flag for message frames.",null,null],[12,"end","","Signal that this frame is the end of the stream of fragments.",2,null],[12,"id","","Identification number associated with this stream.",2,null],[3,"Message","","Representation of an entire mux packet.",null,null],[12,"tag","","Identification and termination information about the associated stream.",3,null],[12,"frame","","Payload of the message. The length is determined from the payload.",3,null],[3,"Treq","","Representation of the mux `Treq` types.",null,null],[12,"headers","","Request headers.",4,null],[12,"body","","Body of the request.",4,null],[3,"Tdispatch","","Representation of a mux `Tdispatch` frame.",null,null],[12,"contexts","","Context information associated with this request.",5,null],[12,"dest","","Destination of this request.",5,null],[12,"dtab","","Table of delegation rules for &#39;rewriting&#39; the destination.",5,null],[12,"body","","Message payload.",5,null],[3,"Rdispatch","","Representation of a mux `Rdispatch` frame.",null,null],[12,"contexts","","Context information associated with this request.",6,null],[12,"msg","","Response of the dispatch request.",6,null],[3,"Init","","Representation of a mux `Tinit` and `Rinit` frame.",null,null],[12,"version","","Mux protocol version.",7,null],[12,"headers","","Additional negotiation related information.",7,null],[3,"Tdiscarded","","Representation of a mux `Tdiscarded` frame.",null,null],[12,"id","","Stream id of the discarded `Tdispatch` request.",8,null],[12,"msg","","Reason for discarding the request.",8,null],[3,"Tlease","","Representation of a mux `Tlease` frame.",null,null],[12,"duration","","`Duration` of the lease allocated to the client.",9,null],[3,"Rerr","","Representation of a mux `Rerr` frame.",null,null],[12,"msg","","Description of the error.",10,null],[4,"MessageFrame","","Type wrapper for the mux packet representations.",null,null],[13,"Treq","","",11,null],[13,"Rreq","","",11,null],[13,"Tdispatch","","",11,null],[13,"Rdispatch","","",11,null],[13,"Tinit","","",11,null],[13,"Rinit","","",11,null],[13,"Tdrain","","",11,null],[13,"Rdrain","","",11,null],[13,"Tping","","",11,null],[13,"Rping","","",11,null],[13,"Tdiscarded","","",11,null],[13,"Tlease","","",11,null],[13,"Rerr","","",11,null],[4,"Rmsg","","Representation of a mux `Rreq` and `Rdispatch` message body.",null,null],[13,"Ok","","Successful response containing a body.",12,null],[13,"Error","","Response failed. The `String` describes the error.",12,null],[13,"Nack","","Negative acknowledgment. The `String` describes the reason.",12,null],[11,"fmt","","",0,{"inputs":[{"name":"dentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dentry"},{"name":"dentry"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dentry"},{"name":"dentry"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"dtab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"dtab"},{"name":"dtab"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"dtab"},{"name":"dtab"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Dentry` from the key-value pair.",0,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"dentry"}}],[11,"new","","Create a new, empty `Dtab`.",1,{"inputs":[],"output":{"name":"dtab"}}],[11,"from_entries","","Create a new `Dtab` containing the `Dentry`s.",1,{"inputs":[{"name":"vec"}],"output":{"name":"dtab"}}],[11,"add_entry","","Add an entry to this `Dtab`.",1,{"inputs":[{"name":"dtab"},{"name":"string"},{"name":"string"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"dtab"}}],[0,"codec","","Codec functions for encoding and decoding mux frames.",null,null],[5,"read_message","mux::codec","Synchronously read a whole mux `Message`",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"decode_message","","Synchronously decode a mux `Message`",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"write_message","","Synchronously encode a `Message` to the `Write` with the frame size",null,{"inputs":[{"name":"w"},{"name":"message"}],"output":{"name":"result"}}],[5,"encode_message","","Synchronously encode a `Message` to the `Write`",null,{"inputs":[{"name":"w"},{"name":"message"}],"output":{"name":"result"}}],[5,"encode_frame","","Synchronously encode a `MessageFrame` to the `Write`",null,{"inputs":[{"name":"w"},{"name":"messageframe"}],"output":{"name":"result"}}],[5,"decode_frame","","Synchronously decode a mux `MessageFrame`",null,{"inputs":[{"name":"i8"},{"name":"r"}],"output":{"name":"result"}}],[5,"decode_tlease","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_tlease","","",null,{"inputs":[{"name":"w"},{"name":"tlease"}],"output":{"name":"result"}}],[5,"decode_tdiscarded","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_tdiscarded","","",null,{"inputs":[{"name":"w"},{"name":"tdiscarded"}],"output":{"name":"result"}}],[5,"decode_tag","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_tag","","",null,{"inputs":[{"name":"w"},{"name":"tag"}],"output":{"name":"result"}}],[5,"encode_headers","","",null,{"inputs":[{"name":"w"},{"name":"headers"}],"output":{"name":"result"}}],[5,"decode_headers","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_contexts","","",null,{"inputs":[{"name":"w"},{"name":"contexts"}],"output":{"name":"result"}}],[5,"decode_contexts","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"decode_dtab","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_dtab","","",null,{"inputs":[{"name":"w"},{"name":"dtab"}],"output":{"name":"result"}}],[5,"decode_rerr","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_rerr","","",null,{"inputs":[{"name":"w"},{"name":"rerr"}],"output":{"name":"result"}}],[5,"encode_init","","",null,{"inputs":[{"name":"w"},{"name":"init"}],"output":{"name":"result"}}],[5,"decode_init","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_rdispatch","","",null,{"inputs":[{"name":"w"},{"name":"rdispatch"}],"output":{"name":"result"}}],[5,"decode_rdispatch","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_rreq","","",null,{"inputs":[{"name":"w"},{"name":"rmsg"}],"output":{"name":"result"}}],[5,"decode_rreq","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"decode_tdispatch","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_tdispatch","","",null,{"inputs":[{"name":"w"},{"name":"tdispatch"}],"output":{"name":"result"}}],[5,"decode_treq","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_treq","","",null,{"inputs":[{"name":"w"},{"name":"treq"}],"output":{"name":"result"}}],[5,"decode_u16_string","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"encode_u16_string","","",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[0,"size","","",null,null],[5,"frame_size","mux::codec::size","",null,{"inputs":[{"name":"messageframe"}],"output":{"name":"usize"}}],[5,"tdispatch_size","","",null,{"inputs":[{"name":"tdispatch"}],"output":{"name":"usize"}}],[5,"rdispatch_size","","",null,{"inputs":[{"name":"rdispatch"}],"output":{"name":"usize"}}],[5,"treq_size","","",null,{"inputs":[{"name":"treq"}],"output":{"name":"usize"}}],[5,"rmsg_size","","",null,{"inputs":[{"name":"rmsg"}],"output":{"name":"usize"}}],[5,"init_size","","",null,{"inputs":[{"name":"init"}],"output":{"name":"usize"}}],[5,"context_size","","",null,{"inputs":[{"name":"contexts"}],"output":{"name":"usize"}}],[5,"dtab_size","","",null,{"inputs":[{"name":"dtab"}],"output":{"name":"usize"}}],[0,"types","mux","Wire identification tag of the mux message types.",null,null],[17,"TREQ","mux::types","",null,null],[17,"RREQ","","",null,null],[17,"TDISPATCH","","",null,null],[17,"RDISPATCH","","",null,null],[17,"TINIT","","",null,null],[17,"RINIT","","",null,null],[17,"TDRAIN","","",null,null],[17,"RDRAIN","","",null,null],[17,"TPING","","",null,null],[17,"RPING","","",null,null],[17,"TDISCARDED","","",null,null],[17,"TLEASE","","",null,null],[17,"RERR","","",null,null],[6,"Headers","mux","Headers for a `Treq`.",null,null],[6,"Contexts","","Contexts of dispatch and init messages.",null,null],[17,"MAX_TAG","","Maximum value of a mux Tag",null,null],[11,"clone","","",2,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"fmt","","",2,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"messageframe"},{"name":"messageframe"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"messageframe"},{"name":"messageframe"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"messageframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"treq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"treq"},{"name":"treq"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"treq"},{"name":"treq"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"rmsg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"rmsg"},{"name":"rmsg"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"rmsg"},{"name":"rmsg"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"tdispatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"tdispatch"},{"name":"tdispatch"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"tdispatch"},{"name":"tdispatch"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"rdispatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"rdispatch"},{"name":"rdispatch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"rdispatch"},{"name":"rdispatch"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"init"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"init"},{"name":"init"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"init"},{"name":"init"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"tdiscarded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"tdiscarded"},{"name":"tdiscarded"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"tdiscarded"},{"name":"tdiscarded"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"tlease"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"tlease"},{"name":"tlease"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"tlease"},{"name":"tlease"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"rerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"rerr"},{"name":"rerr"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"rerr"},{"name":"rerr"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Tag`.",2,{"inputs":[{"name":"bool"},{"name":"u32"}],"output":{"name":"tag"}}],[11,"frame_id","","Get the `i8` value coresponding the a `MessageFrame`.",11,{"inputs":[{"name":"messageframe"}],"output":{"name":"i8"}}],[11,"new","","Construct a new `Tdispatch` frame with the provided destination and body.",5,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"tdispatch"}}]],"paths":[[3,"Dentry"],[3,"Dtab"],[3,"Tag"],[3,"Message"],[3,"Treq"],[3,"Tdispatch"],[3,"Rdispatch"],[3,"Init"],[3,"Tdiscarded"],[3,"Tlease"],[3,"Rerr"],[4,"MessageFrame"],[4,"Rmsg"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
